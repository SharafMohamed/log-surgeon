/** @file groups.dox
 *  @brief Test group hierarchy for Doxygen documentation.
 */

/**
 * @defgroup test_log_parser_no_capture Basic Variable Matching (No Capture Groups)
 * @brief Tests covering variable matching without regex capture groups.
 */

/**
 * @defgroup test_log_parser_capture Log Parser with Capture Groups
 * @brief Tests LogParser behavior with named capture groups in variable schemas.
 *
 * @details
 * Verifies:
 * - Symbol registration for variables and capture groups
 * - Correct association of tag positions
 * - Proper assignment and lookup of tag registers
 *
 * Useful for validating advanced schema features like `(?<name>...)` integration.
 *
 * @see test_log_parser_no_capture for simpler variable matching.
 */

/**
 * @defgroup test_log_parser_default_schema Log Parser: Default Schema
 * @brief Tests for CLP's default variable schema: timestamp, int, float, hex, key-value pairs, etc.
 *
 * @details
 * Validates token recognition across common variable types using a default schema definition.
 */

/**
 * @defgroup test_log_parser_delimited_variables Log Parser: Variables with Delimiters Schema
 * @brief Tests for LogParser using a schema where variables are defined with custom delimiters.
 *
 * @details
 * This group contains tests that verify tokenization using:
 * - Custom delimiters (`\n\r\[:,)`)
 * - Variables that require delimiters to separate them properly in the input.
 *
 * These tests ensure the parser correctly handles and matches variables bounded by specified
 * delimiters.
 */

/**
 * @defgroup test_log_parser_newline_vars Variable Tokens on Newlines
 * @brief Tests covering how LogParser categorizes variable tokens appearing at the start of new lines,
 *        including interaction with static-text, delimiters, and capture group repetition.
 *
 * These tests verify correct tokenization and recognition of variables and delimiters
 * when variables occur on new lines, especially following different token types.
 */

